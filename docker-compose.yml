version: "3.7"

services:
    mysql:
        container_name: products_mysql
        tty: true
        image: mysql:8
        restart: unless-stopped
        environment:
            MYSQL_DATABASE: ${MYSQL_DATABASE:-products}
            MYSQL_USER: ${MYSQL_USER:-products_user}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD:-products_password}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-products_root_password}
        volumes:
            - ./docker/data/mysql:/var/lib/mysql
        ports:
            - 7306:3306
        depends_on:
            - web
        networks:
            - products-net
    web:
        container_name: products_web
        tty: true
        build:
            dockerfile: ./docker/php8.2-apache/Dockerfile
            context: .
            args:
                COMPOSER_DEV: ${COMPOSER_DEV:-true}
                XDEBUG_FILE_LINK_FORMAT: ${XDEBUG_FILE_LINK_FORMAT:-}
        ports:
            - 8070:80
        volumes:
            - .:/var/www/html
        environment:
            XDEBUG_MODE: ${XDEBUG_MODE:-off}
            XDEBUG_CONFIG: ${XDEBUG_CONFIG:-client_host=host.docker.internal client_port=9003 log=/temp/xdebug.log discover_client_host=true  idekey=phpstorm}
        extra_hosts:
            - "host.docker.internal:host-gateway"
        networks:
            - products-net

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
###< doctrine/doctrine-bundle ###
networks:
    products-net:
        name: products-net
        driver: bridge

volumes:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
